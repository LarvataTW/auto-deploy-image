variables:
  DOCKER_DRIVER: overlay2

  HELM_VERSION: 2.14.0
  KUBERNETES_VERSION: 1.11.10

  BUILD_IMAGE_NAME: "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
  RELEASE_IMAGE_NAME: "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:stable"

stages:
  - build
  - test
  - release

build:
  stage: build
  image: docker:stable
  services:
    - docker:stable-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build --build-arg "HELM_VERSION=$HELM_VERSION" --build-arg "KUBERNETES_VERSION=$KUBERNETES_VERSION" --tag "$BUILD_IMAGE_NAME" .
    - docker push "$BUILD_IMAGE_NAME"

test-dependencies:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  script:
    - helm version --client
    - tiller -version
    - kubectl version --client

test-kube-domain:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    KUBE_INGRESS_BASE_DOMAIN: example.com
  script:
    - source /build/deploy-helpers.sh
    - check_kube_domain

test-kube-domain-legacy:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    AUTO_DEVOPS_DOMAIN: example.com
  script:
    - source /build/deploy-helpers.sh
    - check_kube_domain && expected_error || failed_as_expected

test-kube-domain_error:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  script:
    - source /build/deploy-helpers.sh
    - check_kube_domain && expected_error || failed_as_expected

test-download-chart:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  script:
    - source /build/deploy-helpers.sh
    - download_chart

test-ensure-namespace:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    KUBE_NAMESPACE: project-123456
  script:
    - download_k3s
    - start_k3s
    - source /build/deploy-helpers.sh
    - ensure_namespace

test-initialize-tiller:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    KUBE_NAMESPACE: default
  script:
    - download_k3s
    - start_k3s
    - source /build/deploy-helpers.sh
    - initialize_tiller

# disabled, doesn't look like k3s supports docker-registry secret
.test-create-secret:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    KUBE_NAMESPACE: default
    CI_REGISTRY: example.com
    CI_DEPLOY_USER: ci-deploy-user
    CI_DEPLOY_PASSWORD: ci-deploy-password
    GITLAB_USER_EMAIL: user@example.com
  script:
    - download_k3s
    - start_k3s
    - source /build/deploy-helpers.sh
    - create_secret
    - kubectl get secret gitlab-registry -n $KUBE_NAMESPACE

test-create-secret-public-project:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    CI_PROJECT_VISIBILITY: public
    KUBE_NAMESPACE: default
  script:
    - download_k3s
    - start_k3s
    - source /build/deploy-helpers.sh
    - create_secret
    - kubectl get secret gitlab-registry -n $KUBE_NAMESPACE && expected_error || failed_as_expected

test-persist-environment-url:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    CI_ENVIRONMENT_URL: review-app.example.com
  script:
    - source /build/deploy-helpers.sh
    - persist_environment_url
    - grep review-app.example.com environment_url.txt

# disabled, k3s does not support helm charts
.test-deploy:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    CI_APPLICATION_REPOSITORY: "registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image/master/test-dockerfile"
    CI_APPLICATION_TAG: "b359d01bc8c611a2f7b14283cc878dea4a5f85d7"
    CI_ENVIRONMENT_SLUG: production
    CI_ENVIRONMENT_URL: example.com
    CI_PROJECT_PATH_SLUG: "gitlab-org/cluster-integration/auto-build-image"
    CI_PROJECT_VISIBILITY: public
    KUBE_NAMESPACE: default
    KUBE_INGRESS_BASE_DOMAIN: example.com
    POSTGRES_ENABLED: true
    POSTGRES_USER: user
    POSTGRES_PASSWORD: testing-password
    POSTGRES_ENABLED: "true"
    POSTGRES_DB: $CI_ENVIRONMENT_SLUG
    POSTGRES_VERSION: 9.6.2
  script:
    - download_k3s
    - start_k3s
    - source /build/deploy-helpers.sh
    - initialize_tiller
    - download_chart
    - deploy
    - helm ls

test-create-application-secret:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    KUBE_NAMESPACE: default
    CI_ENVIRONMENT_SLUG: production
    K8S_SECRET_CODE: 12345
  script:
    - download_k3s
    - start_k3s
    - source /build/deploy-helpers.sh
    - create_application_secret "stable"
    - kubectl get secrets -n $KUBE_NAMESPACE
    - kubectl get secrets production-secret -n $KUBE_NAMESPACE

test-deploy-name:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    CI_ENVIRONMENT_SLUG: production
  script:
    - source /build/deploy-helpers.sh
    - name=$(deploy_name "stable")
    - |
      if [[ $name != "production" ]]; then
        echo "$name should equal 'production'"
        exit 1
      fi
    - name=$(deploy_name "canary")
    - |
      if [[ $name != "production-canary" ]]; then
        echo "$name should equal 'production-canary'"
        exit 1
      fi

test-get-replicas:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  variables:
    CI_ENVIRONMENT_SLUG: production
  script:
    - source /build/deploy-helpers.sh
    - replicas=$(get_replicas "stable" "100")
    - |
      if [[ $replicas != 1 ]]; then
        echo "$replicas should equal 1"
        exit 1
      fi

release:
  stage: release
  image: docker:stable
  services:
    - docker:stable-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull "$BUILD_IMAGE_NAME"
    - docker tag "$BUILD_IMAGE_NAME" "$RELEASE_IMAGE_NAME"
    - docker push "$RELEASE_IMAGE_NAME"

before_script:
  - |
    function expected_error() {
      echo "Expected error but exited with $?, failing build!"
      exit 1
    }

    function failed_as_expected() {
      echo "Failed as expected and exited with $?"
    }

    function download_k3s() {
      wget https://github.com/rancher/k3s/releases/download/v0.5.0/k3s
      chmod +x k3s
    }

    function start_k3s() {
      ./k3s server > k3s.log 2>&1 &

      until [ -f /etc/rancher/k3s/k3s.yaml ]; do
        sleep 1
        echo -n .
      done

      export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
      kubectl version
    }
